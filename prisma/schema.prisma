// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  stacks        Stack[]
  isVerfied     Boolean   @default(false)
  token         Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ApiKey        ApiKey?
}

model Card {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  title     String
  price     String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Stack     Stack?   @relation(fields: [stackId], references: [id])
  stackId   String?  @db.ObjectId
}

model Stack {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  notes     String
  image     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model ApiKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}
